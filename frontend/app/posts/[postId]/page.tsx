
'use client';

import { getPostById } from '@/services/postService';
import React, { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import { Post } from '@/services/postService';
import PostActions from '@/components/common/PostActions';
import CommentList from '@/components/common/CommentList';
import InteractionButtons from '@/components/common/InteractionButtons';
import RegenerateWithFeedback from "@/components/story/RegenrateWithFeedback";
import PublishControls from "@/components/story/PublishControls";
import DOMPurify from "isomorphic-dompurify";
import Link from 'next/link';
import { useHydratedAuth } from '@/hooks/useHydratedAuth';
export default function PostDetailPage() {
  const [post, setPost] = useState<Post | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
const { user, isAuthenticated, isHydrated } = useHydratedAuth();
  const params = useParams();
  const postId = params.postId as string;

  useEffect(() => {
    if (!postId) return;

    const fetchPost = async () => {
      try {
        const postData = await getPostById(postId);
        setPost(postData);
      } catch (err) {
        setError('Post not found or you do not have permission to view it.');
      } finally {
        setLoading(false);
      }
    };

    fetchPost();
  }, [postId]);
const canModify =
  isHydrated &&
  isAuthenticated && post !== null &&
  (
    user?.id === post.user.id ||
    ['moderator', 'superadmin'].includes(user?.role?.name ?? '')
  );
  if (loading) {
    return <p className="p-8 text-center">Loading post...</p>;
  }

  if (error) {
    return <p className="p-8 text-center text-red-500">{error}</p>;
  }

  // This check prevents the "Cannot read properties of null" error
  if (!post) {
    return <p className="p-8 text-center">Post not found.</p>;
  }
  console.log(post)
  return (
    <main className="mx-auto max-w-3xl p-8 font-sans">
      <article>
        <h1 className="mb-4 text-4xl font-bold text-text">{post.title}</h1>
        <PostActions
          postAuthorId={post.user.id}
          postId={post.id}
          isAI={post.source === 'ai'}
        />
        <div className="mb-8 text-sm text-text-light">
          <span>By {post.user.username}</span>
          <span className="mx-2">•</span>
          <span>{new Date(post.created_at).toLocaleDateString()}</span>
        </div>
        {/* <div className="prose lg:prose-xl text-text">
          <p>{post.content}</p>
        </div> */}
        <div className="prose lg:prose-xl text-text"
          dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(post.content || "") }} />
        <div className="mb-4 flex flex-wrap gap-2">
          {post.tags.map((tag) => (
            <Link href={`/tags/${tag.name}`} key={tag.id} className="text-sm font-medium bg-primary/10 text-primary px-2 py-1 rounded-full hover:bg-primary hover:text-white transition-colors">
              #{tag.name}
            </Link>
          ))}
        </div>
      </article>
      {post.source === "ai" && (
        <div className="mb-4 text-sm text-gray-600">
          <div>Generated by AI • version {post.version ?? 1}</div>
          <div>Genre: {post.genre || "—"} | Tone: {post.tone || "—"} | Length: {post.length_label || "—"}</div>
        </div>
      )}

      {/* Publish/Unpublish controls (only for owner/mods—apply your auth checks) */}
      {canModify&& <PublishControls postId={post.id} isPublished={post.is_published} />}

      {/* Feedback + regenerate (only for owner) */}
      {post.source === "ai" && canModify &&  (
        <div className="mt-8">
          <RegenerateWithFeedback postId={post.id} />
        </div>
      )}
      <div className="mt-8 border-t pt-4">
        <InteractionButtons
          postId={post.id}
          initialLiked={post.is_liked_by_user} // <-- Pass initial state
          initialBookmarked={post.is_bookmarked_by_user} // <-- Pass initial state
        />
      </div>
      <CommentList postId={postId} />
    </main>
  );
}
